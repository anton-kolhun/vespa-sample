search book {
    document book {

      field id type string {
            indexing: summary | attribute
        }

        field title type string {
            indexing: summary | index
        }

        field author type string {
            indexing: summary | attribute
            rank: filter
        }


        field description type string {
            indexing: summary | index
        }

        field tags type array<string> {
            indexing: summary | index
            match: text
        }

        field year type long {
            indexing: summary | attribute
            rank: filter
        }
    }

    field ngram type string {
        indexing {
            # Initialize variables
            "" | set_var tags_var | set_var description_var | set_var title_var;

            select_input {tags: (input tags | join " ") | set_var tags_var;};
            select_input {description: input description | set_var description_var;};
            select_input {title: input title | set_var title_var;};

            get_var tags_var . " " . (get_var description_var) . " " . (get_var title_var)  | index
        }
        match {
            gram
            gram-size: 2
        }
    }

    document-summary base_summary {
        summary id type string {}
        summary title type string {}
        summary author type string {}
        summary description type string {}
        summary tags type array<string> {}
        summary year type long {}
    }

    rank-profile custom inherits default {

        rank-properties {
            query(title): 0.5
            query(tags): 0.25
            query(description): 0.25

            query(ngram_match_weight): 0.2
            query(text_match_weight) : 0.8

        }

        function textMatchScore () {
            expression {
                query(title) * nativeFieldMatch(title) + query(tags) * nativeFieldMatch(tags) + query(description) * nativeFieldMatch(description) 
            }
        }

        function ngramMatchScore () {
           expression: fieldMatch(ngram)
         }

        first-phase {
            expression: textMatchScore * query(ngram_match_weight)  + ngramMatchScore * query(ngram_match_weight)
            rank-score-drop-limit: 0.01
        }

    }

}
